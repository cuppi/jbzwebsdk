{"version":3,"sources":["structure/JPromise.js"],"names":["Object","defineProperty","exports","value","JPromise","para","promise","hasCanceled_","wrappedPromise","resolve","reject","then","val","catch","error","_promise","terminate","otherParas","otherHeaders","useParas","paras","useHeaders","headers","default"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;;IACMC,Q;;;;;;;;;;+BACYC,I,EAAM;AAChB,gBAAIC,UAAU,IAAd;AACA,gBAAI,OAAOD,IAAP,IAAe,UAAnB,EAA+B;AAC3BC,0BAAU,sBAAYD,IAAZ,CAAV;AACH,aAFD,MAGK;AACDC,0BAAUD,IAAV;AACH;AACD,gBAAIE,eAAe,KAAnB;AACA,gBAAMC,iBAAiB,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpDJ,wBAAQK,IAAR,CAAa,UAACC,GAAD;AAAA,2BAASL,eAChB,YAAM,CACP,CAFiB,GAGhBE,QAAQG,GAAR,CAHO;AAAA,iBAAb,EAGoB,YAAM;AACtB;AACH,iBALD;AAMAN,wBAAQO,KAAR,CAAc,UAACC,KAAD;AAAA,2BAAWP,eACnB,YAAM,CACP,CAFoB,GAGnBG,OAAOI,KAAP,CAHQ;AAAA,iBAAd;AAIH,aAXsB,CAAvB;AAYA,gBAAIC,WAAW,sBAAc,EAAd,EAAkBP,cAAlB,EAAkC,EAAEQ,WAAW,qBAAM;AAC5DT,mCAAe,IAAf;AACH,iBAF4C,EAE1CI,MAAM,cAACF,OAAD,EAAUC,MAAV,EAAqB;AAC1B,2BAAOF,eAAeG,IAAf,CAAoBF,OAApB,EAA6BC,MAA7B,CAAP;AACH,iBAJ4C,EAI1CO,YAAY,EAJ8B,EAI1BC,cAAc,EAJY,EAIRC,UAAU,oBAAc;AAAA,sDAAVC,KAAU;AAAVA,6BAAU;AAAA;;AACzDL,6BAASE,UAAT,GAAsBG,KAAtB;AACA,2BAAOL,QAAP;AACH,iBAP4C,EAO1CM,YAAY,sBAAgB;AAAA,uDAAZC,OAAY;AAAZA,+BAAY;AAAA;;AAC3BP,6BAASG,YAAT,GAAwBI,OAAxB;AACA,2BAAOP,QAAP;AACH,iBAV4C,EAAlC,CAAf;AAWA,mBAAOA,QAAP;AACH;;;;;AAELb,QAAQqB,OAAR,GAAkBnB,QAAlB","file":"JPromise.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass JPromise extends Promise {\n    static create(para) {\n        let promise = null;\n        if (typeof para == \"function\") {\n            promise = new Promise(para);\n        }\n        else {\n            promise = para;\n        }\n        let hasCanceled_ = false;\n        const wrappedPromise = new Promise((resolve, reject) => {\n            promise.then((val) => hasCanceled_\n                ? () => {\n                }\n                : resolve(val), () => {\n                // 不写会有警告\n            });\n            promise.catch((error) => hasCanceled_\n                ? () => {\n                }\n                : reject(error));\n        });\n        let _promise = Object.assign({}, wrappedPromise, { terminate: () => {\n                hasCanceled_ = true;\n            }, then: (resolve, reject) => {\n                return wrappedPromise.then(resolve, reject);\n            }, otherParas: [], otherHeaders: [], useParas: (...paras) => {\n                _promise.otherParas = paras;\n                return _promise;\n            }, useHeaders: (...headers) => {\n                _promise.otherHeaders = headers;\n                return _promise;\n            } });\n        return _promise;\n    }\n}\nexports.default = JPromise;\n"]}