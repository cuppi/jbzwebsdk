{"version":3,"sources":["arithmetic/AutoSeatPicking.js"],"names":["Object","defineProperty","exports","value","instance","AutoSeatPicking","needSeatCount","rowCount","colCount","minRow","Number","POSITIVE_INFINITY","minCol","seatMap","seatModelMap","resultCallback","defaultManager","prototype","createSeatMap","smartSeats","maxRow","maxCol","_i","smartSeats_1","length","seat","Math","max","row","col","min","i","j","_a","smartSeats_2","status","loveIndex","isNaN","autoSelected","count","rowLength","colLength","parseInt","targetFromRowColTier","tier","targetFromRowColInnerOffsetTier","innerOffset","rowSignTimes","rowSign","colSignTimes","colSign","changeTimes","change","rowOffset","colOffset","resultRow","resultCol","result","checkVisibleSeatAtRowColMiddleOffsetCount","resultMap","result_1","integer","row_1","col_1","key","set","integerAt","concat","default"],"mappings":"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","file":"AutoSeatPicking.js","sourcesContent":["\"use strict\";\n/**\n * Created by cuppi on                                              2016/12/21.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// 项目甲方公司人员并存在抄袭想法观看这段代码会在↑时间开始的一年里发生不好的事情的\n// 我说话一向蛮准的\n// 对  这就是赤果果的诅咒 -.-\n// 此代码开源的 外人随便看 并希望大家对开源献出自己的一份力量\n// 此代码有很多需优化的细节... 遍历顺序，时间复杂度，可定制型什么的... balabala... 时间来不及了...\n// import _ from 'lodash';\nvar instance = null;\nvar AutoSeatPicking = (function () {\n    function AutoSeatPicking() {\n        if (!instance) {\n            this.needSeatCount = 0;\n            this.rowCount = 0;\n            this.colCount = 0;\n            this.minRow = Number.POSITIVE_INFINITY;\n            this.minCol = Number.POSITIVE_INFINITY;\n            this.seatMap = [];\n            this.seatModelMap = [];\n            instance = this;\n            this.resultCallback = null;\n        }\n        return instance;\n    }\n    AutoSeatPicking.defaultManager = function () {\n        return new AutoSeatPicking();\n    };\n    /**\n     * 创建快捷座位简图\n     * @param smartSeats 目标座位图\n     */\n    AutoSeatPicking.prototype.createSeatMap = function (smartSeats) {\n        var maxRow = 0;\n        var maxCol = 0;\n        var minRow = Number.POSITIVE_INFINITY;\n        var minCol = Number.POSITIVE_INFINITY;\n        for (var _i = 0, smartSeats_1 = smartSeats; _i < smartSeats_1.length; _i++) {\n            var seat = smartSeats_1[_i];\n            maxRow = Math.max(seat.row, maxRow);\n            maxCol = Math.max(seat.col, maxCol);\n            minRow = Math.min(seat.row, minRow);\n            minCol = Math.min(seat.col, minCol);\n        }\n        for (var i = 0; i <= maxRow; i++) {\n            this.seatMap[i] = [];\n            this.seatModelMap[i] = [];\n            for (var j = 0; j <= maxCol; j++) {\n                this.seatMap[i][j] = '_';\n                this.seatModelMap[i][j] = {};\n            }\n        }\n        for (var _a = 0, smartSeats_2 = smartSeats; _a < smartSeats_2.length; _a++) {\n            var seat = smartSeats_2[_a];\n            this.seatModelMap[seat.row][seat.col] = seat;\n            if (seat.status === 0 && (seat.loveIndex === 0 || isNaN(seat.loveIndex))) {\n                this.seatMap[seat.row][seat.col] = '0';\n            }\n            else {\n                this.seatMap[seat.row][seat.col] = '1';\n            }\n        }\n        this.rowCount = maxRow + 1;\n        this.colCount = maxCol + 1;\n        this.minRow = minRow;\n        this.minCol = minCol;\n    };\n    /**\n     *  一层一层寻找最佳位置\n     * @param smartSeats 目标座位图\n     * @param count 期望最佳位置的数量\n     * @param resultCallback 结果回调\n     */\n    AutoSeatPicking.prototype.autoSelected = function (smartSeats, count, resultCallback) {\n        this.createSeatMap(smartSeats);\n        this.needSeatCount = count;\n        this.resultCallback = resultCallback;\n        var rowLength = (this.rowCount - this.minRow);\n        var colLength = (this.colCount - this.minCol);\n        for (var i = 0; i <= Math.max(parseInt(this.rowCount / 2), parseInt(this.colCount / 2)); i++) {\n            if (this.targetFromRowColTier(parseInt(rowLength / 2) + this.minRow, parseInt(colLength / 2) + this.minCol, i)) {\n                return;\n            }\n        }\n        resultCallback(new Map());\n    };\n    /**\n     * 判断指定层是否存在最佳位置\n     * @param row 指定点行\n     * @param col 指定点列\n     * @param tier 层数\n     * @returns {boolean} 是否存在最佳位置\n     */\n    AutoSeatPicking.prototype.targetFromRowColTier = function (row, col, tier) {\n        for (var i = 0; i <= tier; i++) {\n            if (this.targetFromRowColInnerOffsetTier(row, col, i, tier)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * 判断指定点的期望结果\n     * @param row 指定点行\n     * @param col 指定点列\n     * @param innerOffset 行内偏移\n     * @param tier 层索引\n     * @returns {boolean} 是否存在\n     */\n    AutoSeatPicking.prototype.targetFromRowColInnerOffsetTier = function (row, col, innerOffset, tier) {\n        var rowSignTimes = (innerOffset !== 0) + 0;\n        for (var rowSign = -1; rowSign <= rowSignTimes; rowSign++) {\n            if (!rowSign) {\n                continue;\n            }\n            var colSignTimes = (tier !== 0) + 0;\n            for (var colSign = -1; colSign <= colSignTimes; colSign++) {\n                if (!colSign) {\n                    continue;\n                }\n                var changeTimes = (innerOffset !== tier) + 0;\n                for (var change = 0; change <= changeTimes; change++) {\n                    var rowOffset = void 0, colOffset = void 0;\n                    if (change) {\n                        rowOffset = tier * colSign;\n                        colOffset = innerOffset * rowSign;\n                    }\n                    else {\n                        rowOffset = innerOffset * rowSign;\n                        colOffset = tier * colSign;\n                    }\n                    var resultRow = row + rowOffset;\n                    var resultCol = col + colOffset;\n                    if (resultRow < 0 ||\n                        resultCol < 0 ||\n                        resultRow >= this.rowCount ||\n                        resultCol >= this.colCount) {\n                        // console.log('内存溢出');\n                        return false;\n                    }\n                    if (this.seatMap[resultRow][resultCol] === '0') {\n                        var result = this.checkVisibleSeatAtRowColMiddleOffsetCount(resultRow, resultCol, this.needSeatCount);\n                        if (result.length === this.needSeatCount) {\n                            var resultMap = new Map();\n                            for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {\n                                var integer = result_1[_i];\n                                var row_1 = parseInt(integer / this.colCount);\n                                var col_1 = integer % this.colCount;\n                                var key = row_1 + ':' + col_1;\n                                var value = this.seatModelMap[row_1][col_1];\n                                resultMap.set(key, value);\n                                // [self selectedSeatRow:integer/this.colCount col:integer%this.rowCount];\n                            }\n                            if (this.resultCallback) {\n                                this.resultCallback(resultMap);\n                            }\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * 判断指定点的所有行内偏移的结果\n     * @param row 指定点行\n     * @param col 指定点列\n     * @param count 当前查找的数量(后期需要优化)\n     * @returns {*} 是否存在期望点\n     */\n    AutoSeatPicking.prototype.checkVisibleSeatAtRowColMiddleOffsetCount = function (row, col, count) {\n        if (col >= this.colCount || col < 0) {\n            return [];\n        }\n        // 当期望是一个点的时候\n        if (count === 1) {\n            if (this.seatMap[row][col] === '0') {\n                return [this.integerAt(row, col)];\n            }\n            return [];\n        }\n        // i为遍历偏移量 （目前是从左到右)\n        for (var i = 0; i <= parseInt(count / 2); i++) {\n            var result = [];\n            for (var j = 0; j < this.needSeatCount; j++) {\n                result = result.concat(this.checkVisibleSeatAtRowColMiddleOffsetCount(row, col + i - parseInt(this.needSeatCount / 2) + j, 1));\n            }\n            if (result.length === this.needSeatCount) {\n                return result;\n            }\n            if (i <= parseInt((count - 1) / 2)) {\n                result = [];\n                for (var j = 0; j < this.needSeatCount; j++) {\n                    result = result.concat(this.checkVisibleSeatAtRowColMiddleOffsetCount(row, col - i - parseInt(this.needSeatCount / 2) + j, 1));\n                }\n                if (result.length === this.needSeatCount) {\n                    return result;\n                }\n            }\n        }\n        return [];\n    };\n    /**\n     * 二维转一维\n     * @param row 行号\n     * @param col 列好\n     * @returns {*} 一维对应的映射\n     */\n    AutoSeatPicking.prototype.integerAt = function (row, col) {\n        return row * this.colCount + col;\n    };\n    return AutoSeatPicking;\n}());\nexports.default = AutoSeatPicking;\n"]}