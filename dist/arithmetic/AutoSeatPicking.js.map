{"version":3,"sources":["arithmetic/AutoSeatPicking.js"],"names":["Object","defineProperty","exports","value","instance","AutoSeatPicking","needSeatCount","rowCount","colCount","minRow","Number","POSITIVE_INFINITY","minCol","seatMap","seatModelMap","resultCallback","smartSeats","maxRow","maxCol","seat","Math","max","row","col","min","i","j","status","loveIndex","isNaN","count","createSeatMap","rowLength","colLength","floor","targetFromRowColTier","tier","targetFromRowColInnerOffsetTier","innerOffset","rowSignTimes","rowSign","colSignTimes","colSign","changeTimes","change","rowOffset","colOffset","resultRow","resultCol","result","checkVisibleSeatAtRowColMiddleOffsetCount","length","resultMap","integer","key","set","integerAt","concat","default"],"mappings":"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","file":"AutoSeatPicking.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet instance = null;\nclass AutoSeatPicking {\n    constructor() {\n        if (!instance) {\n            this.needSeatCount = 0;\n            this.rowCount = 0;\n            this.colCount = 0;\n            this.minRow = Number.POSITIVE_INFINITY;\n            this.minCol = Number.POSITIVE_INFINITY;\n            this.seatMap = [];\n            this.seatModelMap = [];\n            instance = this;\n            this.resultCallback = null;\n        }\n        return instance;\n    }\n    static defaultManager() {\n        return new AutoSeatPicking();\n    }\n    /**\n     * 创建快捷座位简图\n     * @param smartSeats 目标座位图\n     */\n    createSeatMap(smartSeats) {\n        let maxRow = 0;\n        let maxCol = 0;\n        let minRow = Number.POSITIVE_INFINITY;\n        let minCol = Number.POSITIVE_INFINITY;\n        for (let seat of smartSeats) {\n            maxRow = Math.max(seat.row, maxRow);\n            maxCol = Math.max(seat.col, maxCol);\n            minRow = Math.min(seat.row, minRow);\n            minCol = Math.min(seat.col, minCol);\n        }\n        for (let i = 0; i <= maxRow; i++) {\n            this.seatMap[i] = [];\n            this.seatModelMap[i] = [];\n            for (let j = 0; j <= maxCol; j++) {\n                this.seatMap[i][j] = '_';\n                this.seatModelMap[i][j] = null;\n            }\n        }\n        for (let seat of smartSeats) {\n            this.seatModelMap[seat.row][seat.col] = seat;\n            if (seat.status === 0 && (seat.loveIndex === 0 || isNaN(seat.loveIndex))) {\n                this.seatMap[seat.row][seat.col] = '0';\n            }\n            else {\n                this.seatMap[seat.row][seat.col] = '1';\n            }\n        }\n        this.rowCount = maxRow + 1;\n        this.colCount = maxCol + 1;\n        this.minRow = minRow;\n        this.minCol = minCol;\n    }\n    /**\n     *  一层一层寻找最佳位置\n     * @param smartSeats 目标座位图\n     * @param count 期望最佳位置的数量\n     * @param resultCallback 结果回调\n     */\n    autoSelected(smartSeats, count, resultCallback) {\n        this.createSeatMap(smartSeats);\n        this.needSeatCount = count;\n        this.resultCallback = resultCallback;\n        let rowLength = (this.rowCount - this.minRow);\n        let colLength = (this.colCount - this.minCol);\n        for (let i = 0; i <= Math.max(Math.floor(this.rowCount / 2), Math.floor(this.colCount / 2)); i++) {\n            if (this.targetFromRowColTier(Math.floor(rowLength / 2) + this.minRow, Math.floor(colLength / 2) + this.minCol, i)) {\n                return;\n            }\n        }\n        resultCallback(new Map());\n    }\n    /**\n     * 判断指定层是否存在最佳位置\n     * @param row 指定点行\n     * @param col 指定点列\n     * @param tier 层数\n     * @returns {boolean} 是否存在最佳位置\n     */\n    targetFromRowColTier(row, col, tier) {\n        for (let i = 0; i <= tier; i++) {\n            if (this.targetFromRowColInnerOffsetTier(row, col, i, tier)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * 判断指定点的期望结果\n     * @param row 指定点行\n     * @param col 指定点列\n     * @param innerOffset 行内偏移\n     * @param tier 层索引\n     * @returns {boolean} 是否存在\n     */\n    targetFromRowColInnerOffsetTier(row, col, innerOffset, tier) {\n        let rowSignTimes = (innerOffset !== 0) ? 1 : 0;\n        for (let rowSign = -1; rowSign <= rowSignTimes; rowSign++) {\n            if (!rowSign) {\n                continue;\n            }\n            let colSignTimes = (tier !== 0) ? 1 : 0;\n            for (let colSign = -1; colSign <= colSignTimes; colSign++) {\n                if (!colSign) {\n                    continue;\n                }\n                let changeTimes = (innerOffset != tier) ? 1 : 0;\n                for (let change = 0; change <= changeTimes; change++) {\n                    let rowOffset, colOffset;\n                    if (change) {\n                        rowOffset = tier * colSign;\n                        colOffset = innerOffset * rowSign;\n                    }\n                    else {\n                        rowOffset = innerOffset * rowSign;\n                        colOffset = tier * colSign;\n                    }\n                    let resultRow = row + rowOffset;\n                    let resultCol = col + colOffset;\n                    if (resultRow < 0 ||\n                        resultCol < 0 ||\n                        resultRow >= this.rowCount ||\n                        resultCol >= this.colCount) {\n                        // console.log('内存溢出');\n                        return false;\n                    }\n                    if (this.seatMap[resultRow][resultCol] === '0') {\n                        let result = this.checkVisibleSeatAtRowColMiddleOffsetCount(resultRow, resultCol, this.needSeatCount);\n                        if (result.length === this.needSeatCount) {\n                            let resultMap = new Map();\n                            for (let integer of result) {\n                                let row = Math.floor(integer / this.colCount);\n                                let col = integer % this.colCount;\n                                let key = row + ':' + col;\n                                let value = this.seatModelMap[row][col];\n                                resultMap.set(key, value);\n                                // [self selectedSeatRow:integer/this.colCount col:integer%this.rowCount];\n                            }\n                            if (this.resultCallback) {\n                                this.resultCallback(resultMap);\n                            }\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * 判断指定点的所有行内偏移的结果\n     * @param row 指定点行\n     * @param col 指定点列\n     * @param count 当前查找的数量(后期需要优化)\n     * @returns {*} 是否存在期望点\n     */\n    checkVisibleSeatAtRowColMiddleOffsetCount(row, col, count) {\n        if (col >= this.colCount || col < 0) {\n            return [];\n        }\n        // 当期望是一个点的时候\n        if (count === 1) {\n            if (this.seatMap[row][col] === '0') {\n                return [this.integerAt(row, col)];\n            }\n            return [];\n        }\n        // i为遍历偏移量 （目前是从左到右)\n        for (let i = 0; i <= Math.floor(count / 2); i++) {\n            let result = [];\n            for (let j = 0; j < this.needSeatCount; j++) {\n                result = result.concat(this.checkVisibleSeatAtRowColMiddleOffsetCount(row, col + i - Math.floor(this.needSeatCount / 2) + j, 1));\n            }\n            if (result.length === this.needSeatCount) {\n                return result;\n            }\n            if (i <= Math.floor((count - 1) / 2)) {\n                result = [];\n                for (let j = 0; j < this.needSeatCount; j++) {\n                    result = result.concat(this.checkVisibleSeatAtRowColMiddleOffsetCount(row, col - i - Math.floor(this.needSeatCount / 2) + j, 1));\n                }\n                if (result.length === this.needSeatCount) {\n                    return result;\n                }\n            }\n        }\n        return [];\n    }\n    /**\n     * 二维转一维\n     * @param row 行号\n     * @param col 列好\n     * @returns {*} 一维对应的映射\n     */\n    integerAt(row, col) {\n        return row * this.colCount + col;\n    }\n}\nexports.default = AutoSeatPicking;\n"]}