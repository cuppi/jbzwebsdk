{"version":3,"sources":["tool/JToolDate.js"],"names":["Object","defineProperty","exports","value","DateTool","_","Date","dateDoing","strDoing","numDoing","otherDoing","result","whatTypeDoing","dateFromDateString","dateFromTimeInterval","timeIntervalFromDate","timeIntervalFromDateString","date","Math","floor","getTime","timeInterval","dateString","format","dateStringFromDate","paddNum","num","replace","cfg","yyyy","getFullYear","yy","toString","substring","M","getMonth","MM","d","getDate","dd","hh","getHours","mm","getMinutes","ss","getSeconds","m","startDate","endDate","justSeconds","startTimeInterval","wantTimeInterval","endTimeInterval","distance","sec","min","hour","day","mou","dateStringFromTimeInterval","currentTimeInterval","now","fromFormat","toFormat","wantDate","getDay","beganDate","days","dateStringAfterDaysLater","setDate","y","default"],"mappings":"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","file":"JToolDate.js","sourcesContent":["\"use strict\";\n/**\n * Created by cuppi on 2016/11/25.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * 时间工具类\n * @memberOf module:tool\n */\nclass DateTool {\n    static whatType(_) {\n        if (typeof (_) === 'object') {\n            if (_ instanceof Date) {\n                return 'Date';\n            }\n        }\n        return typeof (_);\n    }\n    static whatTypeDoing(_, dateDoing, strDoing, numDoing, otherDoing) {\n        if (typeof (_) === 'string') {\n            strDoing();\n        }\n        if (typeof (_) === 'number') {\n            numDoing();\n        }\n        if (typeof (_) === 'object' && _ instanceof Date) {\n            dateDoing();\n        }\n        if (otherDoing) {\n            otherDoing();\n        }\n    }\n    static wantDate(_) {\n        let result = null;\n        DateTool.whatTypeDoing(_, () => {\n            result = _;\n        }, () => {\n            result = DateTool.dateFromDateString(_);\n        }, () => {\n            result = DateTool.dateFromTimeInterval(_);\n        });\n        return result;\n    }\n    static wantTimeInterval(_) {\n        let result = null;\n        DateTool.whatTypeDoing(_, () => {\n            result = DateTool.timeIntervalFromDate(_);\n        }, () => {\n            result = DateTool.timeIntervalFromDateString(_);\n        }, () => {\n            result = _;\n        });\n        return result;\n    }\n    /**\n     * 日期转换时间戳\n     * @static\n     * @param {Date} date 日期\n     * @returns {number} 时间戳\n     */\n    static timeIntervalFromDate(date) {\n        return Math.floor(date.getTime() / 1000);\n    }\n    /**\n     * 时间戳转换日期\n     * @param {number} timeInterval 时间戳\n     * @returns {Date} 日期\n     */\n    static dateFromTimeInterval(timeInterval) {\n        return new Date(timeInterval * 1000);\n    }\n    /**\n     * 日期字符串转换时间戳\n     * 注：时间格式需满足Date规范\n     * 如 2017-05-23 18:56:00、2017/05/23\n     * @param {string} dateString 日期\n     * @returns {number} 时间戳\n     */\n    static timeIntervalFromDateString(dateString, format) {\n        return DateTool.timeIntervalFromDate(new Date(dateString));\n    }\n    /**\n     * 时间戳转换日期字符串\n     * @param {number} timeInterval 时间戳\n     * @param {string} format 日期格式 如: yyyy-MM-dd hh:mm:ss\n     * @returns {string} 日期字符串\n     */\n    static dateStringFromTimeInterval(timeInterval, format) {\n        if (format) {\n            return DateTool.dateStringFromDate(new Date(timeInterval * 1000), format);\n        }\n        else {\n            return DateTool.dateStringFromDate(new Date(timeInterval * 1000), 'yyyy-MM-dd hh:mm:ss');\n        }\n    }\n    /**\n     * 日期转换日期字符串\n     * @param {Date} date Date对象\n     * @param {string} format 格式化信息\n     * @returns {string} 日期字符串\n     */\n    static dateStringFromDate(date, format) {\n        let paddNum = function (num) {\n            num += '';\n            return num.replace(/^(\\d)$/, '0$1');\n        };\n        // 指定格式字符\n        let cfg = {\n            yyyy: date.getFullYear(),\n            yy: date.getFullYear().toString().substring(2),\n            M: date.getMonth() + 1,\n            MM: paddNum(date.getMonth() + 1),\n            d: date.getDate(),\n            dd: paddNum(date.getDate()),\n            hh: date.getHours(),\n            mm: paddNum(date.getMinutes()),\n            ss: paddNum(date.getSeconds()) // 秒\n        };\n        format || (format = 'yyyy-MM-dd hh:mm:ss');\n        return format.replace(/([a-z])(\\1)*/ig, function (m) {\n            return cfg[m];\n        });\n    }\n    // TODO 待开发\n    /**\n     * 日期字符串转换日期 （待开发）\n     * @since ~1.1.*\n     * @param {string} dateString 日期字符串\n     * @param {string} format 日期格式\n     * @returns {Date} 日期\n     */\n    static dateFromDateString(dateString, format) {\n        return new Date(dateString);\n    }\n    // TODO 需要优化月份的算法\n    /**\n     * 获取(多态)日期的距离\n     * @param {Date | string | number} startDate 起始日期\n     * @param {Date | string | number} endDate 结束日期\n     * @param {boolean} justSeconds 只需要秒的总数\n     * @returns {Array} [秒，分，小时，天，月, 年]\n     */\n    static distanceBetweenDate(startDate, endDate, justSeconds) {\n        let startTimeInterval = this.wantTimeInterval(startDate);\n        let endTimeInterval = this.wantTimeInterval(endDate);\n        let distance = endTimeInterval - startTimeInterval;\n        if (justSeconds) {\n            return [distance, 0, 0, 0, 0];\n        }\n        let sec = distance % 60;\n        distance = Math.floor(distance / 60);\n        let min = distance % 60;\n        distance = Math.floor(distance / 60);\n        let hour = distance % 24;\n        distance = Math.floor(distance / 24);\n        let day = distance % 30;\n        let mou = Math.floor(distance / 30);\n        return [sec, min, hour, day, mou];\n    }\n    /**\n     * 获取当前日期对象\n     * @returns {Date} 当前日期对象\n     */\n    static currentDate() {\n        return new Date();\n    }\n    /**\n     * 获取当前日期字符串\n     * @param {string} format 字符串格式\n     * @returns {string} 当前日期字符串\n     */\n    static currentDateString(format) {\n        if (format) {\n            return DateTool.dateStringFromTimeInterval(DateTool.currentTimeInterval(), format);\n        }\n        return DateTool.dateStringFromTimeInterval(DateTool.currentTimeInterval());\n    }\n    /**\n     * 获取当前时间戳\n     * @returns {number} 当前时间戳\n     */\n    static currentTimeInterval() {\n        return Math.floor(Date.now() / 1000);\n    }\n    // TODO 待开发\n    /**\n     * 变换日期字符串格式 （待开发）\n     * @since ~1.1.*\n     * @param {string} dateString 日期字符串\n     * @param {string} fromFormat 输入格式\n     * @param {string} toFormat 输出格式\n     * @returns {string} 字符串\n     */\n    static transformDateStringByFormat(dateString, fromFormat, toFormat) {\n        let timeInterval = DateTool.timeIntervalFromDateString(dateString, fromFormat);\n        return DateTool.dateStringFromTimeInterval(timeInterval, toFormat);\n    }\n    /**\n     * 获取指定(多态)日期为星期几\n     * @param {Date | string | number} date 日期\n     * @returns {number} 0~6  星期一~星期日\n     */\n    static weekDay(date) {\n        return (DateTool.wantDate(date).getDay() + 6) % 7;\n    }\n    /**\n     * 获取(多态)日期某天后的日期()\n     * @param {Date | string | number} beganDate\n     * @param {number} days\n     * @returns {Date} 目的日期\n     */\n    static dateAfterDaysLater(beganDate, days) {\n        return new Date(DateTool.dateStringAfterDaysLater(beganDate, days));\n    }\n    /**\n     * 获取(多态)日期某天后的日期字符串\n     * @param {Date | string | number} beganDate 开始日期\n     * @param {number} days 天数\n     * @returns {string} 目的日期字符串\n     */\n    static dateStringAfterDaysLater(beganDate, days) {\n        beganDate = DateTool.wantDate(beganDate);\n        let endDate = new Date(beganDate);\n        endDate.setDate(beganDate.getDate() + days);\n        let y = endDate.getFullYear();\n        let m;\n        let d;\n        if (endDate.getMonth() > 8) {\n            m = endDate.getMonth() + 1;\n        }\n        else {\n            m = '0' + (endDate.getMonth() + 1);\n        }\n        if (endDate.getDate() > 9) {\n            d = endDate.getDate();\n        }\n        else {\n            d = '0' + endDate.getDate();\n        }\n        return y + '-' + m + '-' + d;\n    }\n}\nexports.default = DateTool;\n"]}