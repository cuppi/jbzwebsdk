{"version":3,"sources":["tool/JToolDate.js"],"names":["Object","defineProperty","exports","value","moment","require","STANDARD_TIMEZONE","_date_format_shim","f","replace","_ti2d","ti","toDate","_d2ti","d","unix","_ti2ds","utcOffset","format","_ds2ti","ds","z","DateTool","timeIntervalFromDate","_d2ds","_ds2d","Date","getTimezoneOffset","_","dateDoing","strDoing","numDoing","otherDoing","result","whatTypeDoing","dateFromDateString","dateFromTimeInterval","timeIntervalFromDateString","date","timeInterval","dateString","timezone","currentDate","startDate","endDate","justSeconds","startTimeInterval","wantTimeInterval","endTimeInterval","distance","sec","Math","floor","min","hour","day","mou","fromFormat","toFormat","wantDate","beganDate","days","add","dateAfterDaysLater","default"],"mappings":"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","file":"JToolDate.js","sourcesContent":["\"use strict\";\n/**\n * Created by cuppi on 2016/11/25.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst moment = require(\"moment\");\n// 北京时区(东八区)早于协调世界时\n// const STANDARD_TIMEZONE = -480;\nconst STANDARD_TIMEZONE = 480;\nconst _date_format_shim = (f) => {\n    if (f) {\n        f = f.replace('yyyy', 'YYYY');\n        f = f.replace('dd', 'DD');\n        f = f.replace('hh', 'HH');\n    }\n    return f;\n};\nconst _ti2d = (ti) => {\n    return moment(ti * 1000).toDate();\n};\nconst _d2ti = (d) => {\n    return moment(d).unix();\n};\nconst _ti2ds = (ti, f) => {\n    f = _date_format_shim(f);\n    return moment(ti * 1000).utcOffset(STANDARD_TIMEZONE).format(f);\n};\nconst _ds2ti = (ds, z) => {\n    return DateTool.timeIntervalFromDate(moment(ds).utcOffset(z, true).toDate());\n};\nconst _d2ds = (d, f) => {\n    f = _date_format_shim(f);\n    return moment(d).utcOffset(STANDARD_TIMEZONE).format(f);\n};\nconst _ds2d = (ds, z) => {\n    return moment(ds).utcOffset(z, true).toDate();\n};\n/**\n * 时间工具类\n * @memberOf module:tool\n */\nclass DateTool {\n    // 距离标准时区(STANDARD_TIMEZONE)的位移 --单位为分钟\n    static offsetFromStandardTimezone() {\n        return new Date().getTimezoneOffset();\n    }\n    /**\n     * 当前日期是什么类型\n     * @param {Date | string | number} _ 日期\n     * @private\n     * @returns {string}\n     */\n    static whatType(_) {\n        if (typeof (_) === 'object') {\n            if (_ instanceof Date) {\n                return 'Date';\n            }\n        }\n        return typeof (_);\n    }\n    /**\n     * 这个日期要做什么\n     * @param {Date | string | number} _ 日期\n     * @param {Function} dateDoing 日期格式做的事情\n     * @param {Function} strDoing 字符串格式做的事情\n     * @param {Function} numDoing 数字格式做的事情\n     * @param {Function} otherDoing  其他格式做的事情\n     * @private\n     */\n    static whatTypeDoing(_, dateDoing, strDoing, numDoing, otherDoing) {\n        if (typeof (_) === 'string') {\n            strDoing();\n        }\n        if (typeof (_) === 'number') {\n            numDoing();\n        }\n        if (typeof (_) === 'object' && _ instanceof Date) {\n            dateDoing();\n        }\n        if (otherDoing) {\n            otherDoing();\n        }\n    }\n    /**\n     * 想要日期格式的日期\n     * @param {Date | string | number} _ 日期\n     * @returns {Date}\n     */\n    static wantDate(_) {\n        let result = null;\n        DateTool.whatTypeDoing(_, () => {\n            result = _;\n        }, () => {\n            result = DateTool.dateFromDateString(_);\n        }, () => {\n            result = DateTool.dateFromTimeInterval(_);\n        });\n        return result;\n    }\n    /**\n     * 想要时间戳格式的日期\n     * @param {Date | string | number} _ 日期\n     * @returns {number}\n     */\n    static wantTimeInterval(_) {\n        let result = null;\n        DateTool.whatTypeDoing(_, () => {\n            result = DateTool.timeIntervalFromDate(_);\n        }, () => {\n            result = DateTool.timeIntervalFromDateString(_);\n        }, () => {\n            result = _;\n        });\n        return result;\n    }\n    /**\n     * 日期转换时间戳\n     * @static\n     * @param {Date} date 日期\n     * @returns {number} 时间戳\n     */\n    static timeIntervalFromDate(date) {\n        return _d2ti(date);\n    }\n    /**\n     * 时间戳转换日期\n     * @param {number} timeInterval 时间戳\n     * @returns {Date} 日期\n     */\n    static dateFromTimeInterval(timeInterval) {\n        return _ti2d(timeInterval);\n    }\n    /**\n     * 日期字符串转换时间戳\n     * @param {string} dateString 日期\n     * @param {string} timezone 时区\n     * @returns {number} 时间戳\n     */\n    static timeIntervalFromDateString(dateString, timezone = STANDARD_TIMEZONE) {\n        return _ds2ti(dateString, timezone);\n    }\n    /**\n     * 时间戳转换日期字符串\n     * @param {number} timeInterval 时间戳\n     * @param {string} format 日期格式 如: YYYY-MM-DD HH:mm:ss\n     * @returns {string} 日期字符串\n     */\n    static dateStringFromTimeInterval(timeInterval, format = 'YYYY-MM-DD HH:mm:ss') {\n        return _ti2ds(timeInterval, format);\n    }\n    /**\n     * 日期字符串转换日期 （待开发）\n     * @param {string} dateString 日期字符串\n     * @param {string} timezone 时区\n     * @returns {Date} 日期\n     */\n    static dateFromDateString(dateString, timezone = STANDARD_TIMEZONE) {\n        return _ds2d(dateString, timezone);\n    }\n    /**\n     * 日期转换日期字符串\n     * @param {Date} date Date对象\n     * @param {string} format 格式化信息\n     * @returns {string} 日期字符串\n     */\n    static dateStringFromDate(date, format = 'YYYY-MM-DD HH:mm:ss') {\n        return _d2ds(date, format);\n    }\n    /**\n     * 获取当前日期对象\n     * @returns {Date} 当前日期对象\n     */\n    static currentDate() {\n        return moment().utcOffset(STANDARD_TIMEZONE).toDate();\n    }\n    /**\n     * 获取当前日期字符串\n     * @param {string} format 字符串格式\n     * @returns {string} 当前日期字符串\n     */\n    static currentDateString(format = 'YYYY-MM-DD HH:mm:ss') {\n        return _d2ds(DateTool.currentDate(), format);\n    }\n    /**\n     * 获取当前时间戳\n     * @returns {number} 当前时间戳\n     */\n    static currentTimeInterval() {\n        return moment().unix();\n    }\n    // TODO 需要优化月份的算法\n    /**\n     * 获取(多态)日期的距离\n     * @param {Date | string | number} startDate 起始日期\n     * @param {Date | string | number} endDate 结束日期\n     * @param {boolean} justSeconds 只需要秒的总数\n     * @returns {Array} [秒，分，小时，天，月, 年]\n     */\n    static distanceBetweenDate(startDate, endDate, justSeconds) {\n        let startTimeInterval = this.wantTimeInterval(startDate);\n        let endTimeInterval = this.wantTimeInterval(endDate);\n        let distance = endTimeInterval - startTimeInterval;\n        if (justSeconds) {\n            return [distance, 0, 0, 0, 0];\n        }\n        let sec = distance % 60;\n        distance = Math.floor(distance / 60);\n        let min = distance % 60;\n        distance = Math.floor(distance / 60);\n        let hour = distance % 24;\n        distance = Math.floor(distance / 24);\n        let day = distance % 1000;\n        let mou = Math.floor(distance / 1000);\n        return [sec, min, hour, day, mou];\n    }\n    // TODO 待开发\n    /**\n     * 变换日期字符串格式 （待开发）\n     * @since ~1.1.*\n     * @param {string} dateString 日期字符串\n     * @param {string} fromFormat 输入格式\n     * @param {string} toFormat 输出格式\n     * @param {string} timezone 时区\n     * @returns {string} 字符串\n     */\n    static transformDateStringByFormat(dateString, fromFormat, toFormat = 'YYYY-MM-DD HH:mm:ss', timezone = STANDARD_TIMEZONE) {\n        return _d2ds(_ds2d(dateString, timezone), toFormat);\n    }\n    /**\n     * 获取指定(多态)日期为星期几\n     * @param {Date | string | number} date 日期\n     * @returns {number} 0~6  星期一~星期日\n     */\n    static weekDay(date) {\n        return (moment(DateTool.wantDate(date)).utcOffset(STANDARD_TIMEZONE).day() + 6) % 7;\n    }\n    /**\n     * 获取(多态)日期某天后的日期()\n     * @param {Date | string | number} beganDate\n     * @param {number} days\n     * @returns {Date} 目的日期\n     */\n    static dateAfterDaysLater(beganDate, days) {\n        return moment(DateTool.wantDate(beganDate)).add(days, 'days').toDate();\n    }\n    /**\n     * 获取(多态)日期某天后的日期字符串\n     * @param {Date | string | number} beganDate 开始日期\n     * @param {number} days 天数\n     * @param {string} format 格式化信息\n     * @returns {string} 目的日期字符串\n     */\n    static dateStringAfterDaysLater(beganDate, days, format = 'YYYY-MM-DD') {\n        return _d2ds(DateTool.dateAfterDaysLater(beganDate, days), format);\n    }\n}\nexports.default = DateTool;\n"]}