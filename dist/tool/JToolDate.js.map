{"version":3,"sources":["tool/JToolDate.js"],"names":["Object","defineProperty","exports","value","moment","require","STANDARD_TIMEZONE","DateTool","Date","getTimezoneOffset","_","dateDoing","strDoing","numDoing","otherDoing","result","whatTypeDoing","dateFromDateString","dateFromTimeInterval","timeIntervalFromDate","timeIntervalFromDateString","format","replace","date","unix","timeInterval","toDate","dateString","timezone","utcOffset","transformFormatString","startDate","endDate","justSeconds","startTimeInterval","wantTimeInterval","endTimeInterval","distance","sec","Math","floor","min","hour","day","mou","fromFormat","toFormat","wantDate","getDay","beganDate","days","dateStringAfterDaysLater","add","default"],"mappings":"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","file":"JToolDate.js","sourcesContent":["\"use strict\";\n/**\n * Created by cuppi on 2016/11/25.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst moment = require(\"moment\");\n// 北京时区(东八区)早于协调世界时\n// const STANDARD_TIMEZONE = -480;\nconst STANDARD_TIMEZONE = 480;\n/**\n * 时间工具类\n * @memberOf module:tool\n */\nclass DateTool {\n    // 距离标准时区(STANDARD_TIMEZONE)的位移 --单位为分钟\n    static offsetFromStandardTimezone() {\n        return new Date().getTimezoneOffset();\n    }\n    /**\n     * 当前日期是什么类型\n     * @param {Date | string | number} _ 日期\n     * @private\n     * @returns {string}\n     */\n    static whatType(_) {\n        if (typeof (_) === 'object') {\n            if (_ instanceof Date) {\n                return 'Date';\n            }\n        }\n        return typeof (_);\n    }\n    /**\n     * 这个日期要做什么\n     * @param {Date | string | number} _ 日期\n     * @param {Function} dateDoing 日期格式做的事情\n     * @param {Function} strDoing 字符串格式做的事情\n     * @param {Function} numDoing 数字格式做的事情\n     * @param {Function} otherDoing  其他格式做的事情\n     * @private\n     */\n    static whatTypeDoing(_, dateDoing, strDoing, numDoing, otherDoing) {\n        if (typeof (_) === 'string') {\n            strDoing();\n        }\n        if (typeof (_) === 'number') {\n            numDoing();\n        }\n        if (typeof (_) === 'object' && _ instanceof Date) {\n            dateDoing();\n        }\n        if (otherDoing) {\n            otherDoing();\n        }\n    }\n    /**\n     * 想要日期格式的日期\n     * @param {Date | string | number} _ 日期\n     * @returns {Date}\n     */\n    static wantDate(_) {\n        let result = null;\n        DateTool.whatTypeDoing(_, () => {\n            result = _;\n        }, () => {\n            result = DateTool.dateFromDateString(_);\n        }, () => {\n            result = DateTool.dateFromTimeInterval(_);\n        });\n        return result;\n    }\n    /**\n     * 想要时间戳格式的日期\n     * @param {Date | string | number} _ 日期\n     * @returns {number}\n     */\n    static wantTimeInterval(_) {\n        let result = null;\n        DateTool.whatTypeDoing(_, () => {\n            result = DateTool.timeIntervalFromDate(_);\n        }, () => {\n            result = DateTool.timeIntervalFromDateString(_);\n        }, () => {\n            result = _;\n        });\n        return result;\n    }\n    static transformFormatString(format) {\n        if (format) {\n            format = format.replace('yyyy', 'YYYY');\n            format = format.replace('dd', 'DD');\n            format = format.replace('hh', 'HH');\n        }\n        return format;\n    }\n    /**\n     * 日期转换时间戳\n     * @static\n     * @param {Date} date 日期\n     * @returns {number} 时间戳\n     */\n    static timeIntervalFromDate(date) {\n        return moment(date).unix();\n    }\n    /**\n     * 时间戳转换日期\n     * @param {number} timeInterval 时间戳\n     * @returns {Date} 日期\n     */\n    static dateFromTimeInterval(timeInterval) {\n        return moment(timeInterval * 1000).toDate();\n    }\n    /**\n     * 日期字符串转换时间戳\n     * 注：时间格式需满足Date规范\n     * 如 2017-05-23 18:56:00、2017/05/23\n     * @param {string} dateString 日期\n     * @param {string} timezone 时区\n     * @returns {number} 时间戳\n     */\n    static timeIntervalFromDateString(dateString, timezone = STANDARD_TIMEZONE) {\n        return DateTool.timeIntervalFromDate(moment(dateString).utcOffset(timezone, true).toDate());\n    }\n    /**\n     * 时间戳转换日期字符串\n     * @param {number} timeInterval 时间戳\n     * @param {string} format 日期格式 如: YYYY-MM-DD HH:mm:ss\n     * @returns {string} 日期字符串\n     */\n    static dateStringFromTimeInterval(timeInterval, format = 'YYYY-MM-DD HH:mm:ss') {\n        format = DateTool.transformFormatString(format);\n        return moment(timeInterval * 1000).utcOffset(STANDARD_TIMEZONE).format(format);\n    }\n    /**\n     * 日期字符串转换日期 （待开发）\n     * @param {string} dateString 日期字符串\n     * @param {string} timezone 时区\n     * @returns {Date} 日期\n     */\n    static dateFromDateString(dateString, timezone = STANDARD_TIMEZONE) {\n        return moment(dateString).utcOffset(timezone, true).toDate();\n    }\n    /**\n     * 日期转换日期字符串\n     * @param {Date} date Date对象\n     * @param {string} format 格式化信息\n     * @returns {string} 日期字符串\n     */\n    static dateStringFromDate(date, format = 'YYYY-MM-DD HH:mm:ss') {\n        format = DateTool.transformFormatString(format);\n        return moment(date).utcOffset(STANDARD_TIMEZONE).format(format);\n    }\n    /**\n     * 获取当前日期对象\n     * @returns {Date} 当前日期对象\n     */\n    static currentDate() {\n        return moment().utcOffset(STANDARD_TIMEZONE).toDate();\n    }\n    /**\n     * 获取当前日期字符串\n     * @param {string} format 字符串格式\n     * @returns {string} 当前日期字符串\n     */\n    static currentDateString(format = 'YYYY-MM-DD HH:mm:ss') {\n        format = DateTool.transformFormatString(format);\n        return moment().utcOffset(STANDARD_TIMEZONE).format(format);\n    }\n    /**\n     * 获取当前时间戳\n     * @returns {number} 当前时间戳\n     */\n    static currentTimeInterval() {\n        return moment().unix();\n    }\n    // TODO 需要优化月份的算法\n    /**\n     * 获取(多态)日期的距离\n     * @param {Date | string | number} startDate 起始日期\n     * @param {Date | string | number} endDate 结束日期\n     * @param {boolean} justSeconds 只需要秒的总数\n     * @returns {Array} [秒，分，小时，天，月, 年]\n     */\n    static distanceBetweenDate(startDate, endDate, justSeconds) {\n        let startTimeInterval = this.wantTimeInterval(startDate);\n        let endTimeInterval = this.wantTimeInterval(endDate);\n        let distance = endTimeInterval - startTimeInterval;\n        if (justSeconds) {\n            return [distance, 0, 0, 0, 0];\n        }\n        let sec = distance % 60;\n        distance = Math.floor(distance / 60);\n        let min = distance % 60;\n        distance = Math.floor(distance / 60);\n        let hour = distance % 24;\n        distance = Math.floor(distance / 24);\n        let day = distance % 1000;\n        let mou = Math.floor(distance / 1000);\n        return [sec, min, hour, day, mou];\n    }\n    // TODO 待开发\n    /**\n     * 变换日期字符串格式 （待开发）\n     * @since ~1.1.*\n     * @param {string} dateString 日期字符串\n     * @param {string} fromFormat 输入格式\n     * @param {string} toFormat 输出格式\n     * @returns {string} 字符串\n     */\n    static transformDateStringByFormat(dateString, fromFormat, toFormat) {\n        toFormat = DateTool.transformFormatString(toFormat);\n        return moment(dateString).format(toFormat);\n    }\n    /**\n     * 获取指定(多态)日期为星期几\n     * @param {Date | string | number} date 日期\n     * @returns {number} 0~6  星期一~星期日\n     */\n    static weekDay(date) {\n        return (DateTool.wantDate(date).getDay() + 6) % 7;\n    }\n    /**\n     * 获取(多态)日期某天后的日期()\n     * @param {Date | string | number} beganDate\n     * @param {number} days\n     * @returns {Date} 目的日期\n     */\n    static dateAfterDaysLater(beganDate, days) {\n        return new Date(DateTool.dateStringAfterDaysLater(beganDate, days));\n    }\n    /**\n     * 获取(多态)日期某天后的日期字符串\n     * @param {Date | string | number} beganDate 开始日期\n     * @param {number} days 天数\n     * @param {string} format 格式化信息\n     * @returns {string} 目的日期字符串\n     */\n    static dateStringAfterDaysLater(beganDate, days, format = 'YYYY-MM-DD') {\n        format = DateTool.transformFormatString(format);\n        return moment(beganDate).add(days, 'days').format(format);\n    }\n}\nexports.default = DateTool;\n"]}