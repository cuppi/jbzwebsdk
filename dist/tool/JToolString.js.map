{"version":3,"sources":["tool/JToolString.js"],"names":["Object","defineProperty","exports","value","StringTool","mobile","test","phone","email","string","verifycode","password","minLength","maxLength","undefined","RegExp","c","ascChar","asc","charCodeAt","force","offset","sum","i","length","radix","numberFromASC","replace","clearString","clearSpace","clearComma","clearVertical","default"],"mappings":"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","file":"JToolString.js","sourcesContent":["'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * 字符串工具类\n * @memberOf module:tool\n */\nclass StringTool {\n    /**\n     * 校验是否为手机号码\n     * @param {string} mobile 手机号码\n     * @returns {boolean} 结果\n     */\n    static isMobile(mobile) {\n        return (/^1[34578]\\d{9}$/.test(mobile));\n    }\n    /**\n     * 校验是否为电话号码\n     * @param {string} phone 电话号码\n     * @returns {boolean} 结果\n     */\n    static isPhoneNumber(phone) {\n        return /(\\(\\d{3,4}\\)|\\d{3,4}-|\\s)?\\d{7,14}/.test(phone);\n    }\n    /**\n     * 检验是否为邮箱\n     * @param {string} email 邮箱\n     * @returns {boolean} 结果\n     */\n    static isEmail(email) {\n        return /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\\.[a-zA-Z0-9_-]{2,3}){1,2})$/.test(email);\n    }\n    /**\n     * 校验是否为空字符串\n     * @param {string} string 字符串\n     * @returns {boolean} 结果\n     */\n    static isEmpty(string) {\n        return !(string && string !== '');\n    }\n    /**\n     * 校验是否为验证码（即0~9 6位数字）\n     * @param {string} verifycode 验证码\n     * @returns {boolean} 结果\n     */\n    static isVerifyCode(verifycode) {\n        return (/^[0-9]{6}$/.test(verifycode));\n    }\n    /**\n     * 校验是否为密码\n     * @param {string} password 密码\n     * @param {number} minLength 最小长度\n     * @param {number} maxLength 最大长度\n     * @returns {boolean} 结果\n     */\n    static isPassword(password, minLength, maxLength) {\n        if (minLength !== undefined && maxLength !== undefined) {\n            return new RegExp(\"^[a-zA-Z0-9]{\" +\n                minLength + \",\" + maxLength +\n                \"}$\").test(password);\n        }\n        return (/^[a-zA-Z0-9]{6,14}$/.test(password));\n    }\n    /**\n     * 去除数字左边所有0\n     * @param c\n     * @returns {*}\n     */\n    static numberRemoveLeftZero(c) {\n        if (/^[0-9]*$/.test(c)) {\n            return Number.parseInt(c) + '';\n        }\n        return c;\n    }\n    /**\n     * 通过asc得出字符数值\n     * @param {string} ascChar asc字符\n     * @returns {number} 数值 A=0; B=1;\n     */\n    static numberFromASC(ascChar) {\n        let asc = ascChar.charCodeAt(0);\n        if (asc >= 65 && asc <= 90) {\n            asc -= 65;\n        }\n        else if (asc >= 97 && asc <= 122) {\n            asc -= 97;\n        }\n        else if (asc >= 48 && asc <= 57) {\n            asc -= 48;\n        }\n        else {\n            asc = 0;\n        }\n        return asc;\n    }\n    /**\n     * 转换字符串到数字\n     * @param {string} string 字符串\n     * @param {boolean} force 是否强制转换非数字字符 (即为26进制数字)\n     * @param {number} offset 非数字时的初始值\n     * @returns {number} 数值\n     */\n    static numberFromString(string, force, offset) {\n        if (/^[0-9]*$/.test(string)) {\n            return Number.parseInt(string);\n        }\n        let sum = offset ? offset : 0;\n        if (force) {\n            for (let i = string.length - 1, radix = 1; i >= 0; i--, radix = radix * 26) {\n                sum += StringTool.numberFromASC(string[i]) * radix;\n            }\n        }\n        return sum;\n    }\n    /**\n     * 清除所有空格字符\n     * @param {string} string 字符串\n     * @returns {string} 结果字符串\n     */\n    static clearSpace(string) {\n        // 过滤空格\n        return string.replace(/\\s+/g, '');\n    }\n    /**\n     * 清除所有逗号\n     * @param {string} string 字符串\n     * @returns {string} 结果字符串\n     */\n    static clearComma(string) {\n        // 过滤空格\n        return string.replace(/\\u002c+/g, '').replace(/，+/g, '');\n    }\n    /**\n     * 清除所有竖线\n     * @param {string} string 字符串\n     * @returns {string} 结果字符串\n     */\n    static clearVertical(string) {\n        // 过滤空格\n        return string.replace(/\\|+/g, '');\n    }\n    /**\n     * 清除所有特殊字符\n     * @param {string} string 字符串\n     * @returns {string} 结果字符串\n     */\n    static clearClutter(string) {\n        let clearString = StringTool.clearSpace(string);\n        clearString = StringTool.clearComma(clearString);\n        clearString = StringTool.clearVertical(clearString);\n        return clearString;\n    }\n}\nexports.default = StringTool;\n"]}