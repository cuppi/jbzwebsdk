{"version":3,"sources":["network/JNetworkTrade.js"],"names":["Object","defineProperty","exports","value","JNetwork_1","require","JUrlList_1","JDataUnify_1","JNetworkRoot_1","JNetworkTrade","type","paras","loginParas","default","resolve","reject","POST","tradeUrl","jbzLockSeat","then","data","error","orderId","jbzCancelOrder","inType","jbzWebAtAppApplyTicket","wrongInType","payType","prizeIds","redIds","jbzAppPrepay","jbzWebPrepay","instance","tradeLockSeatNeedLogin","cancelLockSeatNeedLogin","tradeApplyOrderNeedLogin","tradePrePayOrderNeedLoginInType"],"mappings":"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","file":"JNetworkTrade.js","sourcesContent":["/**\n * Created by cuppi on 2016/12/7.\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst JNetwork_1 = require(\"./JNetwork\");\nconst JUrlList_1 = require(\"../unify/JUrlList\");\nconst JDataUnify_1 = require(\"../unify/JDataUnify\");\nconst JNetworkRoot_1 = require(\"./JNetworkRoot\");\n/**\n * 交易接口\n * @memberOf module:network\n */\nclass JNetworkTrade extends JNetworkRoot_1.default {\n    /**\n     * 锁座\n     * @param type 平台类型\n     * @param paras 锁座参数\n     * @returns {{terminate, then}|*}\n     */\n    tradeLockSeatNeedLogin(type, paras) {\n        let loginParas = JNetwork_1.default.loginParas();\n        return new Promise((resolve, reject) => {\n            JNetwork_1.default.POST(JUrlList_1.tradeUrl.jbzLockSeat, Object.assign({ type }, loginParas, paras)).then(data => {\n                resolve(JDataUnify_1.default('tradeUrl.jbzLockSeat', data));\n            }, error => {\n                reject(error);\n            });\n        });\n    }\n    /**\n     * 取消锁座\n     * @param orderId 订单Id\n     * @returns {{terminate, then}|*}\n     */\n    cancelLockSeatNeedLogin(orderId) {\n        return JNetwork_1.default.POST(JUrlList_1.tradeUrl.jbzCancelOrder, { orderId });\n    }\n    /**\n     * 下订单\n     * @param type 平台类型\n     * @param paras 下订单参数\n     * @returns {{terminate, then}|*}\n     */\n    tradeApplyOrderNeedLogin(type, paras) {\n        let loginParas = JNetwork_1.default.loginParas();\n        let inType = JNetwork_1.default.inType;\n        if (inType === 'ICBC-APP' || inType === 'SHANGHAI-APP') {\n            return new Promise((resolve, reject) => {\n                JNetwork_1.default.POST(JUrlList_1.tradeUrl.jbzWebAtAppApplyTicket, Object.assign({ type }, loginParas, paras)).then(data => {\n                    resolve(JDataUnify_1.default('tradeUrl.jbzWebAtAppApplyTicket', data));\n                }, error => {\n                    reject(error);\n                });\n            });\n        }\n        return JNetwork_1.default.wrongInType();\n    }\n    /**\n     * 申请预订单\n     * @param orderId 订单Id\n     * @param payType 支付类型\n     * @param prizeIds 待定\n     * @param redIds 待定\n     * @returns {{terminate, then}|*}\n     */\n    tradePrePayOrderNeedLoginInType(orderId, payType, prizeIds, redIds) {\n        let loginParas = JNetwork_1.default.loginParas();\n        let inType = JNetwork_1.default.inType;\n        if (inType === 'DPIOS' || inType === 'DPANDROID') {\n            return JNetwork_1.default.POST(JUrlList_1.tradeUrl.jbzAppPrepay, { orderId, payType, prizeIds, redIds }, loginParas);\n        }\n        if (inType === 'DPWX' || inType === 'DPWEB' || inType === 'PC') {\n            return JNetwork_1.default.POST(JUrlList_1.tradeUrl.jbzWebPrepay, { orderId, payType, prizeIds, redIds }, loginParas);\n        }\n        return JNetwork_1.default.wrongInType();\n    }\n    static tradeLockSeatNeedLogin(type, paras) {\n        return this.instance().tradeLockSeatNeedLogin(type, paras);\n    }\n    static cancelLockSeatNeedLogin(orderId) {\n        return this.instance().cancelLockSeatNeedLogin(orderId);\n    }\n    static tradeApplyOrderNeedLogin(type, paras) {\n        return this.instance().tradeApplyOrderNeedLogin(type, paras);\n    }\n    static tradePrePayOrderNeedLoginInType(orderId, payType, prizeIds, redIds) {\n        return this.instance().tradePrePayOrderNeedLoginInType(orderId, payType, prizeIds, redIds);\n    }\n}\nexports.default = JNetworkTrade;\n"]}