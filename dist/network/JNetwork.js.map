{"version":3,"sources":["network/JNetwork.js"],"names":["Object","defineProperty","exports","value","axios_1","require","JPromise_1","JNetwork","otherParas","otherHeaders","paras","headers","baseUrl","console","log","method","url","parameters","otherObject","checkConfigBaseUrl","isOk","jpromise","wrapCancelablePromise","resolve","reject","iHeaders","jaxios","default","create","timeout","params","baseURL","interceptors","request","use","forEach","key","globalParaFunc","delegate","globalParas","globalPara","globalHeaderFunc","globalHeaders","globalHeader","config","requestInterceptor","requestInterceptorError","error","response","responseInterceptor","responseInterceptorError","post","then","status","data","responseJson","errorCode","notLoginError","Error","message","catch","indexOf","fetchRequest","freedomPOST","inType","freedomGET","instance","_instance","test","Math","random","code","promise","arguments","POST","GET"],"mappings":"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","file":"JNetwork.js","sourcesContent":["/**\n * Created by cuppi on 2016/11/22.\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst axios_1 = require(\"axios\");\nconst JPromise_1 = require(\"../structure/JPromise\");\n/** @module network*/\n/**\n * 网络请求类\n * @hideconstructor\n */\nclass JNetwork {\n    constructor() {\n        this.otherParas = [];\n        this.otherHeaders = [];\n    }\n    static useParas(...paras) {\n        let instance = new this();\n        instance.otherParas = paras;\n        return instance;\n    }\n    static useHeaders(...headers) {\n        let instance = new this();\n        instance.otherHeaders = headers;\n        return instance;\n    }\n    useParas(...paras) {\n        this.otherParas = paras;\n        return this;\n    }\n    useHeaders(...headers) {\n        this.otherHeaders = headers;\n        return this;\n    }\n    static instance() {\n        if (!this._instance) {\n            this._instance = new this();\n            this._instance.test = Math.random();\n        }\n        return this._instance;\n    }\n    /**\n     * 验证失败\n     * @private\n     * @returns {Promise}\n     */\n    static failedAuthorizationNetwork() {\n        return new Promise((resolve, reject) => {\n            reject(new Error('authorization error'));\n        });\n    }\n    /**\n     * 不存在的方法\n     * @private\n     * @returns {Promise}\n     */\n    static unrealizedMethod() {\n        return new Promise((resolve, reject) => {\n            reject(new Error('unrealized method'));\n        });\n    }\n    /**\n     * 没有登录\n     * @param code\n     * @returns {any}\n     */\n    static notLoginError(code) {\n        let error = new Error('NotLogin');\n        Reflect.defineProperty(error, 'errorCode', { value: code });\n        return error;\n    }\n    /**\n     * 错误类型\n     * @private\n     * @returns {Promise}\n     */\n    static wrongInType() {\n        return new Promise((resolve, reject) => {\n            reject(new Error('the inType is not exist, please check your inType property in JBZConfig'));\n        });\n    }\n    /**\n     * 包裹可取消的请求 （使用fetch请求时使用，目前通过axios请求，无需使用）\n     * @private\n     * @param promise 异步请求块\n     * @returns {Promise} 被包裹后的异步请求块\n     */\n    static wrapCancelablePromise(promise) {\n        return JPromise_1.default.create(promise);\n    }\n    /***\n     * 检查是否配置SDK\n     * @private\n     */\n    checkConfigBaseUrl() {\n        if (!JNetwork.baseUrl || JNetwork.baseUrl === '') {\n            console.log('please check if you have config baseUrl for SDK');\n            // throw Error('Not Config');\n        }\n    }\n    /**\n     * 发送请求\n     * @param method 方法类型\n     * @param baseUrl 基地址\n     * @param url 相对地址\n     * @param parameters 参数\n     * @param headers 头参数\n     * @param otherObject 其他相关设置\n     * @returns {JPromise<any>}\n     */\n    fetchRequest(method, baseUrl, url, parameters, headers, otherObject) {\n        this.checkConfigBaseUrl();\n        let isOk;\n        let jpromise = JNetwork.wrapCancelablePromise(new Promise((resolve, reject) => {\n            let iHeaders = Object.assign({\n                'Accept': 'application/json',\n                // TODO: 搞明白\n                'Content-Type': 'application/x-www-form-urlencoded'\n                // 'Content-Type': 'application/json'\n            }, headers);\n            let jaxios = axios_1.default.create({\n                method: method,\n                timeout: otherObject.timeout,\n                params: parameters,\n                baseURL: baseUrl,\n                headers: iHeaders\n            });\n            jaxios.interceptors.request.use(config => {\n                let otherParas = {};\n                this.otherParas.forEach(key => {\n                    if (typeof key == \"object\") {\n                        otherParas = Object.assign({}, otherParas, key);\n                        return;\n                    }\n                    let globalParaFunc = JNetwork.delegate.globalParas()[key];\n                    if (globalParaFunc) {\n                        let globalPara = globalParaFunc();\n                        if (typeof globalPara == \"object\") {\n                            otherParas = Object.assign({}, otherParas, globalPara);\n                        }\n                        else if (typeof globalPara == \"string\" || typeof globalPara == \"number\") {\n                            otherParas[key] = globalPara;\n                        }\n                        else {\n                            console.log('全局变量类型不正确:' + key);\n                        }\n                    }\n                    else {\n                        console.log('不存在的全局变量:' + key);\n                    }\n                });\n                let otherHeaders = {};\n                this.otherHeaders.forEach(key => {\n                    if (typeof key == \"object\") {\n                        otherHeaders = Object.assign({}, otherHeaders, key);\n                        return;\n                    }\n                    let globalHeaderFunc = JNetwork.delegate.globalHeaders()[key];\n                    if (globalHeaderFunc) {\n                        let globalHeader = globalHeaderFunc();\n                        if (typeof globalHeader == \"object\") {\n                            otherHeaders = Object.assign({}, otherHeaders, globalHeader);\n                        }\n                        else if (typeof globalHeader == \"string\" || typeof globalHeader == \"number\") {\n                            otherHeaders[key] = globalHeader;\n                        }\n                        else {\n                            console.log('全局变量类型不正确:' + key);\n                        }\n                    }\n                    else {\n                        console.log('不存在的全局变量:' + key);\n                    }\n                });\n                config.params = Object.assign({}, config.params, otherParas);\n                config.headers = Object.assign({}, config.headers, otherHeaders);\n                return JNetwork.delegate.requestInterceptor(config);\n            }, error => {\n                return JNetwork.delegate.requestInterceptorError(error);\n            });\n            jaxios.interceptors.response.use(response => {\n                return JNetwork.delegate.responseInterceptor(response);\n            }, error => {\n                return JNetwork.delegate.responseInterceptorError(error);\n            });\n            jaxios.post(url).then((response) => {\n                isOk = response.status === 200;\n                return response.data;\n            }).then((responseJson) => {\n                if (isOk) {\n                    if (!responseJson.errorCode) {\n                        resolve(responseJson.data);\n                    }\n                    else {\n                        let errorCode = responseJson.errorCode;\n                        if (responseJson.errorCode == 10022) {\n                            reject(JNetwork.notLoginError(100022));\n                        }\n                        else {\n                            reject(new Error(responseJson.message));\n                        }\n                    }\n                }\n                else {\n                    reject(responseJson);\n                }\n            }).catch(error => {\n                // 请求超时\n                if (error.message.indexOf('timeout') != -1) {\n                    reject(new Error('请求超时, 请稍后重试'));\n                }\n                else {\n                    reject(error);\n                }\n            });\n        }));\n        return jpromise;\n    }\n    /**\n     * 高自由度POST方法\n     * @param {string} baseUrl 基地址\n     * @param {string} url 相对地址\n     * @param {object} parameters 地址参数\n     * @param {object} headers 头参数\n     * @param {object} otherObject 其他可用配置\n     * @returns {Promise} 异步请求块\n     */\n    static freedomPOST(baseUrl, url, parameters, headers, otherObject) {\n        return this.instance().freedomPOST(...arguments);\n    }\n    /**\n     * 高自由度GET方法\n     * @param {string} baseUrl\n     * @param {string} url\n     * @param {object} parameters\n     * @param {object} headers\n     * @param {object} otherObject\n     * @returns {Promise} 异步请求块\n     */\n    static freedomGET(baseUrl, url, parameters, headers, otherObject) {\n        return this.instance().freedomGET(...arguments);\n    }\n    /**\n     * post请求\n     * @param {string} url 相对地址\n     * @param {object} parameters 地址参数\n     * @param {object} headers 头参数\n     * @param {object} otherObject 其他参数\n     * @returns {Promise} 异步请求块\n     */\n    static POST(url, parameters, headers, otherObject) {\n        return this.instance().POST(...arguments);\n    }\n    /**\n     * get请求\n     * @param {string} url 相对地址\n     * @param {object} parameters 地址参数\n     * @param {object} headers 头参数\n     * @param {object} otherObject 其他参数\n     * @returns {Promise} 异步请求块\n     */\n    static GET(url, parameters, headers, otherObject) {\n        return this.instance().GET(...arguments);\n    }\n    freedomPOST(baseUrl, url, parameters, headers, otherObject) {\n        return this.fetchRequest('post', baseUrl, url, parameters, headers, otherObject);\n    }\n    freedomGET(baseUrl, url, parameters, headers, otherObject) {\n        return this.fetchRequest('get', baseUrl, url, parameters, headers, otherObject);\n    }\n    POST(url, parameters, headers, otherObject) {\n        return this.freedomPOST(JNetwork.baseUrl, url, Object.assign({}, parameters, { inType: JNetwork.inType }), headers, Object.assign({ timeout: JNetwork.timeout }, otherObject));\n    }\n    GET(url, parameters, headers, otherObject) {\n        return this.freedomGET(JNetwork.baseUrl, url, Object.assign({}, parameters, { inType: JNetwork.inType }), headers, Object.assign({ timeout: JNetwork.timeout }, otherObject));\n    }\n}\nJNetwork.baseUrl = '';\nJNetwork.delegate = null;\nJNetwork.inType = '';\nJNetwork.timeout = 10 * 1000;\nexports.default = JNetwork;\n"]}