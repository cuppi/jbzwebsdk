{"version":3,"sources":["network/JNetwork.js"],"names":["Object","defineProperty","exports","value","axios_1","require","JPromise_1","JNetwork","otherParas","otherHeaders","paras","headers","baseUrl","console","log","method","url","parameters","otherObject","checkConfigBaseUrl","isOk","jpromise","wrapCancelablePromise","resolve","reject","iHeaders","jaxios","default","create","timeout","params","baseURL","interceptors","request","use","forEach","key","globalParas","delegate","error","globalParaFunc","globalPara","globalHeaderFunc","globalHeaders","globalHeader","config","requestInterceptor","requestInterceptorError","response","responseInterceptor","responseInterceptorError","_response","then","status","data","responseJson","errorCode","resolveInterceptor","rejectInterceptor","generalError","message","notLoginError","catch","indexOf","Error","carryData","fetchRequest","freedomPOST","getCarryData","freedomGET","instance","_instance","errorMessage","code","resultError","promise","arguments","POST","GET","inType"],"mappings":"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","file":"JNetwork.js","sourcesContent":["/**\n * Created by cuppi on 2016/11/22.\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst axios_1 = require(\"axios\");\nconst JPromise_1 = require(\"../structure/JPromise\");\n/** @module network*/\n/**\n * 网络请求类\n * @hideconstructor\n */\nclass JNetwork {\n    constructor() {\n        this.otherParas = [];\n        this.otherHeaders = [];\n    }\n    static useParas(...paras) {\n        let instance = new this();\n        instance.otherParas = paras;\n        return instance;\n    }\n    static useHeaders(...headers) {\n        let instance = new this();\n        instance.otherHeaders = headers;\n        return instance;\n    }\n    useParas(...paras) {\n        this.otherParas = paras;\n        return this;\n    }\n    useHeaders(...headers) {\n        this.otherHeaders = headers;\n        return this;\n    }\n    static instance() {\n        if (!this._instance) {\n            this._instance = new this();\n        }\n        return this._instance;\n    }\n    /**\n     * 验证失败\n     * @private\n     * @returns {Promise}\n     */\n    static failedAuthorizationNetwork() {\n        return new Promise((resolve, reject) => {\n            reject(new Error('authorization error'));\n        });\n    }\n    /**\n     * 不存在的方法\n     * @private\n     * @returns {Promise}\n     */\n    static unrealizedMethod() {\n        return new Promise((resolve, reject) => {\n            reject(new Error('unrealized method'));\n        });\n    }\n    /**\n     * 普通异常\n     * @param {error} errorMessage\n     * @param {number} code\n     * @returns {Error}\n     */\n    static generalError(errorMessage, code) {\n        let resultError = new Error(errorMessage);\n        Reflect.defineProperty(resultError, 'errorCode', { value: code });\n        return resultError;\n    }\n    /**\n     * 没有登录异常\n     * @param code\n     * @returns {any}\n     */\n    static notLoginError(code) {\n        let error = new Error('NotLogin');\n        Reflect.defineProperty(error, 'errorCode', { value: code });\n        return error;\n    }\n    /**\n     * 错误类型\n     * @private\n     * @returns {Promise}\n     */\n    static wrongInType() {\n        return new Promise((resolve, reject) => {\n            reject(new Error('the inType is not exist, please check your inType property in JBZConfig'));\n        });\n    }\n    /**\n     * 包裹可取消的请求 （使用fetch请求时使用，目前通过axios请求，无需使用）\n     * @private\n     * @param promise 异步请求块\n     * @returns {Promise} 被包裹后的异步请求块\n     */\n    static wrapCancelablePromise(promise) {\n        return JPromise_1.default.create(promise);\n    }\n    /***\n     * 检查是否配置SDK\n     * @private\n     */\n    checkConfigBaseUrl() {\n        if (!JNetwork.baseUrl || JNetwork.baseUrl === '') {\n            console.log('please check if you have config baseUrl for SDK');\n            // throw Error('Not Config');\n        }\n    }\n    /**\n     * 发送请求\n     * @param method 方法类型\n     * @param baseUrl 基地址\n     * @param url 相对地址\n     * @param parameters 参数\n     * @param headers 头参数\n     * @param otherObject 其他相关设置\n     * @returns {JPromise<any>}\n     */\n    fetchRequest(method, baseUrl, url, parameters, headers, otherObject) {\n        this.checkConfigBaseUrl();\n        let isOk;\n        let jpromise = JNetwork.wrapCancelablePromise(new Promise((resolve, reject) => {\n            let iHeaders = Object.assign({\n                'Accept': 'application/json',\n                // TODO: 搞明白\n                'Content-Type': 'application/x-www-form-urlencoded'\n                // 'Content-Type': 'application/json'\n            }, headers);\n            let jaxios = axios_1.default.create({\n                method: method,\n                timeout: otherObject ? otherObject.timeout : JNetwork.timeout,\n                params: parameters,\n                baseURL: baseUrl,\n                headers: iHeaders\n            });\n            jaxios.interceptors.request.use(config => {\n                let otherParas = {};\n                this.otherParas.forEach(key => {\n                    if (typeof key == \"object\") {\n                        otherParas = Object.assign({}, otherParas, key);\n                        return;\n                    }\n                    let globalParas = JNetwork.delegate.globalParas;\n                    if (!globalParas) {\n                        console.error('未找到全局参数，请确认是否设置globalParas');\n                        return;\n                    }\n                    let globalParaFunc = null;\n                    if (typeof globalParas == \"function\") {\n                        globalParaFunc = globalParas()[key];\n                    }\n                    else if (typeof globalParas == \"object\") {\n                        globalParaFunc = globalParas[key];\n                    }\n                    if (globalParaFunc) {\n                        let globalPara = null;\n                        if (typeof globalParaFunc == \"function\") {\n                            globalPara = globalParaFunc();\n                        }\n                        else {\n                            globalPara = globalParaFunc;\n                        }\n                        if (typeof globalPara == \"object\") {\n                            otherParas = Object.assign({}, otherParas, globalPara);\n                        }\n                        else if (typeof globalPara == \"string\" || typeof globalPara == \"number\") {\n                            otherParas[key] = globalPara;\n                        }\n                        else {\n                            console.log('全局变量类型不正确:' + key);\n                        }\n                    }\n                    else {\n                        console.log('不存在的全局变量:' + key);\n                    }\n                });\n                let otherHeaders = {};\n                this.otherHeaders.forEach(key => {\n                    if (typeof key == \"object\") {\n                        otherHeaders = Object.assign({}, otherHeaders, key);\n                        return;\n                    }\n                    let globalHeaderFunc = JNetwork.delegate.globalHeaders()[key];\n                    if (globalHeaderFunc) {\n                        let globalHeader = globalHeaderFunc();\n                        if (typeof globalHeader == \"object\") {\n                            otherHeaders = Object.assign({}, otherHeaders, globalHeader);\n                        }\n                        else if (typeof globalHeader == \"string\" || typeof globalHeader == \"number\") {\n                            otherHeaders[key] = globalHeader;\n                        }\n                        else {\n                            console.log('全局变量类型不正确:' + key);\n                        }\n                    }\n                    else {\n                        console.log('不存在的全局变量:' + key);\n                    }\n                });\n                config.params = Object.assign({}, config.params, otherParas);\n                config.headers = Object.assign({}, config.headers, otherHeaders);\n                return JNetwork.delegate.requestInterceptor(config);\n            }, error => {\n                return JNetwork.delegate.requestInterceptorError(error);\n            });\n            jaxios.interceptors.response.use(response => {\n                return JNetwork.delegate.responseInterceptor(response);\n            }, error => {\n                return JNetwork.delegate.responseInterceptorError(error);\n            });\n            let _response = null;\n            // TODO: 隐性bug 只有post方法\n            jaxios.request({ url }).then((response) => {\n                isOk = response.status === 200;\n                _response = response;\n                return response.data;\n            }).then((responseJson) => {\n                if (isOk) {\n                    if (!responseJson.errorCode) {\n                        if (JNetwork.delegate.resolveInterceptor(_response, responseJson.data)) {\n                            resolve(responseJson.data);\n                        }\n                    }\n                    else {\n                        if (JNetwork.delegate.rejectInterceptor(_response, JNetwork.generalError(responseJson.message, responseJson.errorCode))) {\n                            if (responseJson.errorCode == 10022) {\n                                reject(JNetwork.notLoginError(10022));\n                            }\n                            else {\n                                reject(JNetwork.generalError(responseJson.message, responseJson.errorCode));\n                            }\n                        }\n                    }\n                }\n                else {\n                    reject(responseJson);\n                }\n            }).catch(error => {\n                // 请求超时\n                if (error.message.indexOf('timeout') != -1) {\n                    reject(new Error('请求超时, 请稍后重试'));\n                }\n                else {\n                    reject(error);\n                }\n            });\n        }));\n        return jpromise;\n    }\n    /**\n     * 高自由度POST方法\n     * @param {string} baseUrl 基地址\n     * @param {string} url 相对地址\n     * @param {object} parameters 地址参数\n     * @param {object} headers 头参数\n     * @param {object} otherObject 其他可用配置\n     * @returns {Promise} 异步请求块\n     */\n    static freedomPOST(baseUrl, url, parameters, headers, otherObject) {\n        return this.instance().freedomPOST(...arguments);\n    }\n    /**\n     * 高自由度GET方法\n     * @param {string} baseUrl\n     * @param {string} url\n     * @param {object} parameters\n     * @param {object} headers\n     * @param {object} otherObject\n     * @returns {Promise} 异步请求块\n     */\n    static freedomGET(baseUrl, url, parameters, headers, otherObject) {\n        return this.instance().freedomGET(...arguments);\n    }\n    /**\n     * post请求\n     * @param {string} url 相对地址\n     * @param {object} parameters 地址参数\n     * @param {object} headers 头参数\n     * @param {object} otherObject 其他参数\n     * @returns {Promise} 异步请求块\n     */\n    static POST(url, parameters, headers, otherObject) {\n        return this.instance().POST(...arguments);\n    }\n    /**\n     * get请求\n     * @param {string} url 相对地址\n     * @param {object} parameters 地址参数\n     * @param {object} headers 头参数\n     * @param {object} otherObject 其他参数\n     * @returns {Promise} 异步请求块\n     */\n    static GET(url, parameters, headers, otherObject) {\n        return this.instance().GET(...arguments);\n    }\n    getCarryData() {\n        let carryData = null;\n        if (JNetwork.carryData) {\n            if (typeof JNetwork.carryData == \"function\") {\n                carryData = JNetwork.carryData();\n            }\n            if (typeof JNetwork.carryData == \"object\") {\n                carryData = JNetwork.carryData;\n            }\n        }\n        return carryData || {};\n    }\n    freedomPOST(baseUrl, url, parameters, headers, otherObject) {\n        return this.fetchRequest('post', baseUrl, url, parameters, headers, otherObject);\n    }\n    freedomGET(baseUrl, url, parameters, headers, otherObject) {\n        return this.fetchRequest('get', baseUrl, url, parameters, headers, otherObject);\n    }\n    POST(url, parameters, headers, otherObject) {\n        return this.freedomPOST(JNetwork.baseUrl, url, Object.assign({}, this.getCarryData(), parameters), headers, Object.assign({ timeout: JNetwork.timeout }, otherObject));\n    }\n    GET(url, parameters, headers, otherObject) {\n        return this.freedomGET(JNetwork.baseUrl, url, Object.assign({}, this.getCarryData(), parameters), headers, Object.assign({ timeout: JNetwork.timeout }, otherObject));\n    }\n}\nJNetwork.inType = '';\nJNetwork.baseUrl = '';\nJNetwork.delegate = null;\nJNetwork.carryData = {};\nJNetwork.timeout = 10 * 1000;\nexports.default = JNetwork;\n"]}