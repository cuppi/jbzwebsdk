{"version":3,"sources":["network/JNetwork.js"],"names":["Object","defineProperty","exports","value","axios_1","require","JPromise_1","JNetwork","delegate","cityParas","coordinateParas","cityId","id","longitude","latitude","loginParas","resolve","reject","Error","code","error","promise","default","create","baseUrl","console","log","method","url","parameters","headers","otherObject","checkConfigBaseUrl","isOk","jpromise","wrapCancelablePromise","iHeaders","jaxios","timeout","params","baseURL","interceptors","request","use","otherParas","forEach","key","globalParaFunc","globalParas","globalPara","otherHeaders","globalHeaderFunc","globalHeaders","globalHeader","config","requestInterceptor","requestInterceptorError","response","responseInterceptor","responseInterceptorError","post","then","status","data","responseJson","errorCode","notLoginError","message","catch","indexOf","fetchRequest","freedomPOST","inType","freedomGET"],"mappings":"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","file":"JNetwork.js","sourcesContent":["/**\n * Created by cuppi on 2016/11/22.\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst axios_1 = require(\"axios\");\nconst JPromise_1 = require(\"../structure/JPromise\");\n/** @module network*/\n/**\n * 网络请求类\n * @hideconstructor\n */\nclass JNetwork {\n    /**\n     * 需要定位的请求的公共参数\n     * @private\n     * @returns {*}\n     */\n    static locationParas() {\n        if (this.delegate) {\n            let cityParas = this.delegate.cityParas();\n            let coordinateParas = this.delegate.coordinateParas();\n            return {\n                cityId: cityParas.id,\n                longitude: coordinateParas.longitude,\n                latitude: coordinateParas.latitude\n            };\n        }\n        return null;\n    }\n    /**\n     * 需要登录的请求的公共参数\n     * @private\n     * @returns {*}\n     */\n    static loginParas() {\n        if (this.delegate && this.delegate.loginParas) {\n            return this.delegate.loginParas();\n        }\n        return {};\n    }\n    /**\n     * 验证失败\n     * @private\n     * @returns {Promise}\n     */\n    static failedAuthorizationNetwork() {\n        return new Promise((resolve, reject) => {\n            reject(new Error('authorization error'));\n        });\n    }\n    /**\n     * 不存在的方法\n     * @private\n     * @returns {Promise}\n     */\n    static unrealizedMethod() {\n        return new Promise((resolve, reject) => {\n            reject(new Error('unrealized method'));\n        });\n    }\n    /**\n     * 没有登录\n     * @param code\n     * @returns {any}\n     */\n    static notLoginError(code) {\n        let error = new Error('NotLogin');\n        Reflect.defineProperty(error, 'errorCode', { value: code });\n        return error;\n    }\n    /**\n     * 错误类型\n     * @private\n     * @returns {Promise}\n     */\n    static wrongInType() {\n        return new Promise((resolve, reject) => {\n            reject(new Error('the inType is not exist, please check your inType property in JBZConfig'));\n        });\n    }\n    /**\n     * 包裹可取消的请求 （使用fetch请求时使用，目前通过axios请求，无需使用）\n     * @private\n     * @param promise 异步请求块\n     * @returns {Promise} 被包裹后的异步请求块\n     */\n    static wrapCancelablePromise(promise) {\n        return JPromise_1.default.create(promise);\n    }\n    /***\n     * 检查是否配置SDK\n     * @private\n     */\n    static checkConfigBaseUrl() {\n        if (!this.baseUrl || this.baseUrl === '') {\n            console.log('please check if you have config baseUrl for SDK');\n            throw Error('Not Config');\n        }\n    }\n    static fetchRequest(method, baseUrl, url, parameters, headers, otherObject) {\n        this.checkConfigBaseUrl();\n        let isOk;\n        let jpromise = this.wrapCancelablePromise(new Promise((resolve, reject) => {\n            let iHeaders = Object.assign({\n                'Accept': 'application/json',\n                // TODO: 搞明白\n                'Content-Type': 'application/x-www-form-urlencoded'\n                // 'Content-Type': 'application/json'\n            }, headers);\n            let jaxios = axios_1.default.create({\n                method: method,\n                timeout: otherObject.timeout,\n                params: parameters,\n                baseURL: baseUrl,\n                headers: iHeaders\n            });\n            jaxios.interceptors.request.use(config => {\n                let otherParas = {};\n                jpromise.otherParas.forEach(key => {\n                    if (typeof key == \"object\") {\n                        otherParas = Object.assign({}, otherParas, key);\n                        return;\n                    }\n                    let globalParaFunc = this.delegate.globalParas()[key];\n                    if (globalParaFunc) {\n                        let globalPara = globalParaFunc();\n                        if (typeof globalPara == \"object\") {\n                            otherParas = Object.assign({}, otherParas, globalPara);\n                        }\n                        else if (typeof globalPara == \"string\" || typeof globalPara == \"number\") {\n                            otherParas[key] = globalPara;\n                        }\n                        else {\n                            console.log('全局变量类型不正确:' + key);\n                        }\n                    }\n                    else {\n                        console.log('不存在的全局变量:' + key);\n                    }\n                });\n                let otherHeaders = {};\n                jpromise.otherHeaders.forEach(key => {\n                    if (typeof key == \"object\") {\n                        otherHeaders = Object.assign({}, otherHeaders, key);\n                        return;\n                    }\n                    let globalHeaderFunc = this.delegate.globalHeaders()[key];\n                    if (globalHeaderFunc) {\n                        let globalHeader = globalHeaderFunc();\n                        if (typeof globalHeader == \"object\") {\n                            otherHeaders = Object.assign({}, otherHeaders, globalHeader);\n                        }\n                        else if (typeof globalHeader == \"string\" || typeof globalHeader == \"number\") {\n                            otherHeaders[key] = globalHeader;\n                        }\n                        else {\n                            console.log('全局变量类型不正确:' + key);\n                        }\n                    }\n                    else {\n                        console.log('不存在的全局变量:' + key);\n                    }\n                });\n                config.params = Object.assign({}, config.params, otherParas);\n                config.headers = Object.assign({}, config.headers, otherHeaders);\n                return this.delegate.requestInterceptor(config);\n            }, error => {\n                return this.delegate.requestInterceptorError(error);\n            });\n            jaxios.interceptors.response.use(response => {\n                return this.delegate.responseInterceptor(response);\n            }, error => {\n                return this.delegate.responseInterceptorError(error);\n            });\n            jaxios.post(url).then((response) => {\n                isOk = response.status === 200;\n                return response.data;\n            }).then((responseJson) => {\n                if (isOk) {\n                    if (!responseJson.errorCode) {\n                        resolve(responseJson.data);\n                    }\n                    else {\n                        let errorCode = responseJson.errorCode;\n                        if (responseJson.errorCode == 10022) {\n                            reject(JNetwork.notLoginError(100022));\n                        }\n                        else {\n                            reject(new Error(responseJson.message));\n                        }\n                    }\n                }\n                else {\n                    reject(responseJson);\n                }\n            }).catch(error => {\n                // 请求超时\n                if (error.message.indexOf('timeout') != -1) {\n                    reject(new Error('请求超时, 请稍后重试'));\n                }\n                else {\n                    reject(error);\n                }\n            });\n        }));\n        return jpromise;\n    }\n    /**\n     * 高自由度POST方法\n     * @param {string} baseUrl 基地址\n     * @param {string} url 相对地址\n     * @param {object} parameters 地址参数\n     * @param {object} headers 头参数\n     * @param {object} otherObject 其他可用配置\n     * @returns {Promise} 异步请求块\n     */\n    static freedomPOST(baseUrl, url, parameters, headers, otherObject) {\n        return this.fetchRequest('post', baseUrl, url, parameters, headers, otherObject);\n    }\n    /**\n     * 高自由度GET方法\n     * @param {string} baseUrl\n     * @param {string} url\n     * @param {object} parameters\n     * @param {object} headers\n     * @param {object} otherObject\n     * @returns {Promise} 异步请求块\n     */\n    static freedomGET(baseUrl, url, parameters, headers, otherObject) {\n        return this.fetchRequest('get', baseUrl, url, parameters, headers, otherObject);\n    }\n    /**\n     * post请求\n     * @param {string} url 相对地址\n     * @param {object} parameters 地址参数\n     * @param {object} headers 头参数\n     * @param {object} otherObject 其他参数\n     * @returns {Promise} 异步请求块\n     */\n    static POST(url, parameters, headers, otherObject) {\n        return this.freedomPOST(this.baseUrl, url, Object.assign({}, parameters, { inType: this.inType }), headers, Object.assign({ timeout: this.timeout }, otherObject));\n    }\n    /**\n     * get请求\n     * @param {string} url 相对地址\n     * @param {object} parameters 地址参数\n     * @param {object} headers 头参数\n     * @param {object} otherObject 其他参数\n     * @returns {Promise} 异步请求块\n     */\n    static GET(url, parameters, headers, otherObject) {\n        return this.freedomGET(this.baseUrl, url, Object.assign({}, parameters, { inType: this.inType }), headers, Object.assign({ timeout: this.timeout }, otherObject));\n    }\n}\nJNetwork.baseUrl = '';\nJNetwork.timeout = 10 * 1000;\nJNetwork.delegate = null;\nJNetwork.inType = '';\nexports.default = JNetwork;\n"]}